# Analyzes output generated by ppm ramp
from __future__ import print_function
import numpy as np
import argparse
import pandas as pd
import sys
import os

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

def main():
    ###### arguments #######
    folder = '/N/slate/dkwong/'
    # folder = '/mnt/c/Users/Doug/Downloads'
    joblist = 'joblist.out'
    # joblist = '/mnt/c/Users/Doug/Downloads/joblist.out'
    query = 'xend > 0.99 and polend==1'   # For no query, write 'all'
    xendQuery = 'stopID==1' # For xend query
    E_HIST_ON = False        # Plots E start and end histogram for each B field
    T_HIST_ON = False        # Plots t end histogram for each B field
    XEND_HIST_ON = True     # Plots x end of neutrons absorbed in the NiPh pipe
    nbins = 250
    histRange = [0,250E-9]  # neV
    timeRange = [0,20]      # seconds
    xEndRange = [-1, 1]     # meters
    ########################

    if query != "all":
        print('Applying filter to neutrons:')
        print(query)

    print('Reading ', joblist)
    startRun, endRun, param = np.genfromtxt(joblist, unpack=True, comments='#')

    # Scale to 5 Telsa ramp
    param = np.array(param) * 5
    neutronCount = []
    Estart = []
    Eend = []
    tend = []
    xend = []

    if (folder[-1] != '/'):
        folder = folder + '/'

    for start, end, p in zip(startRun, endRun, param):
        print('\nReading run files where B ~ ',p, ' [T]')
        runNum = np.arange(int(start),int(end)+1)
        total = 0
        totalBeforeQuery = 0
        EstartTotal = np.zeros(nbins)
        EendTotal = np.zeros(nbins)
        timeTotal = np.zeros( int(timeRange[1]-timeRange[0])*2 )
        xendTotal = np.zeros(nbins)
        missedRuns = []

        for i in runNum:
            runName = folder + str(i).zfill(12) + 'neutronend.out'
            print(i,'...', end='')
            sys.stdout.flush()      # Yes, I know print has a flush=True option. Doesn't work in python2
            try:
                df = pd.read_csv(runName, delim_whitespace=True)# usecols=[1,6,7,8,9,10,11,12,14,18,19,20,21,26,27,28,30,32,33,34])
                # Queries may involve any property listed below:
                # ['particle', 'vxstart', 'vystart', 'vzstart','polstart', 'Sxstart', 'Systart', 'Szstart', 'Estart', 'tend',
                # 'xend', 'yend', 'zend', 'Sxend', 'Syend', 'Szend','Eend', 'BxEnd', 'ByEnd', 'BzEnd']

                totalBeforeQuery += len(df.index)

            except:
                missedRuns.append(i)
                continue

            # Pipe exit histogram
            histTemp, xEndEdges = np.histogram(df.query(xendQuery)['xend'], range=xEndRange, bins=nbins)
            xendTotal += histTemp

            if query != "all":
                df = df.query(query)

            total += len(df.index)
            histTemp, eStartEdges = np.histogram(df['Estart'],range = histRange, bins = nbins)
            EstartTotal += histTemp

            histTemp, eEndEdges = np.histogram(df['Eend'],range = histRange, bins = nbins)
            EendTotal += histTemp

            # Time histogram
            timeTemp, timeEdges = np.histogram(df['tend'], range = timeRange, bins=int(timeRange[1]-timeRange[0])*2 )
            timeTotal += timeTemp


        #ENDFOR

        print('okay!')
        print('Total neutrons simulated: ', totalBeforeQuery)
        print('Neutrons after query: ', total)
        print('Error reading run numbers-- ', missedRuns)
        neutronCount.append( float(total)/float(totalBeforeQuery) )
        Estart.append(EstartTotal)
        Eend.append(EendTotal)
        tend.append(timeTotal)
        xend.append(xendTotal)
    #ENDFOR

    print('\nPlotting...',end='')
    plt.figure()
    plt.plot(param, np.divide(neutronCount,neutronCount[0]) ,marker='.')
    plt.xlabel('B [T]')
    plt.ylabel('Neutron count')
    plt.title('PPM flux')
    plt.grid()
    plt.savefig('PPM_ramp.png')
    plt.close()

    xsum = []

    for p, Es, Ee, t, x in zip(param, Estart, Eend, tend, xend):
        if E_HIST_ON:
            fig, ax = plt.subplots()
            ax.bar(eStartEdges[1:], Es, width=(histRange[1]-histRange[0])/float(nbins))
            ax.set_xlabel('E start [neV]')
            ax.set_xlim([histRange[0] , histRange[1]])
            ax.set_ylabel('Number of neutrons')
            plt.savefig('Estart_B=' + str(np.round(p, decimals=3)) + '.png')
            plt.close()

            fig, ax = plt.subplots()
            ax.bar(eEndEdges[1:], Ee, width=(histRange[1]-histRange[0])/float(nbins))
            ax.set_xlabel('E end [neV]')
            ax.set_xlim([histRange[0] , histRange[1]])
            ax.set_ylabel('Number of neutrons')
            plt.savefig('Eend_B=' + str(np.round(p, decimals=3)) + '.png')
            plt.close()

        if T_HIST_ON:
            fig, ax = plt.subplots()
            ax.bar(timeEdges[1:], t, width=(timeRange[1]-timeRange[0])/float(int(timeRange[1]-timeRange[0])*2))
            ax.set_xlabel('time [sec]')
            ax.set_xlim([timeRange[0] , timeRange[1]])
            ax.set_ylabel('Number of neutrons')
            plt.savefig('t_B=' + str(np.round(p, decimals=3)) + '.png')
            plt.close()

        if XEND_HIST_ON:
            xsum.append( np.sum(x) )
            fig, ax = plt.subplots()
            ax.bar(xEndEdges[1:], x, width=(xEndRange[1]-xEndRange[0])/float(nbins))
            ax.set_xlabel('xend [m]')
            ax.set_xlim([xEndRange[0] , xEndRange[1]])
            ax.set_ylabel('Number of neutrons')
            plt.savefig('xend_B=' + str(np.round(p, decimals=3)) + '.png')
            plt.close()

    if XEND_HIST_ON:
        plt.figure()
        plt.plot(param, xsum ,marker='.')
        plt.xlabel('B [T]')
        plt.ylabel('Neutron count')
        plt.title('Integrated neutrons lost in pipe')
        plt.grid()
        plt.savefig('xend_ramp.png')
        plt.close()

    print('Done!')



    return

if ( __name__ == '__main__' ):
    main()
