#!/usr/bin/env python
# Analyzes output generated by ppm ramp
from __future__ import print_function
import numpy as np
import argparse
import pandas as pd
import sys
import os

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

def main():
    ###### arguments #######
    folder = '/N/dc2/scratch/dkwong/'
    # folder = '/mnt/c/Users/Doug/Downloads'
    joblist = 'joblist.out'
    # joblist = '/mnt/c/Users/Doug/Downloads/joblist.out'
    query = 'xend > 0.95'   # For no query, write 'all'
    E_HIST_ON = True        # Plots E start histogram for each parameter
    nbins = 250
    histRange = [0,500E-9]  # neV
    ########################

    if query != "all":
        print('Applying filter to neutrons:')
        print(query)

    print('Reading ', joblist)
    startRun, endRun, param = np.genfromtxt(joblist, unpack=True, comments='#')

    # Scale to 6 Telsa ramp
    param = np.array(param) * 6
    neutronCount = []
    Estart = []
    binEdges =[]

    if (folder[-1] != '/'):
        folder = folder + '/'

    for start, end, p in zip(startRun, endRun, param):
        print('\nReading run files where B ~ ',p, ' [T]')
        runNum = np.arange(int(start),int(end)+1)
        total = 0
        histTotal = np.zeros(nbins)
        histTemp = []
        missedRuns = []

        for i in runNum:
            runName = folder + str(i).zfill(12) + 'neutronend.out'
            print(i,'...', end='')
            sys.stdout.flush()      # Yes, I know print has a flush=True option. Doesn't work in python2
            try:
                df = pd.read_csv(runName, delim_whitespace=True, usecols=[1,6,7,8,9,10,11,12,14,18,19,20,21,26,27,28,32,33,34])
                # Queries may involve any property listed below:
                # ['particle', 'vxstart', 'vystart', 'vzstart','polstart', 'Sxstart', 'Systart', 'Szstart', 'Estart', 'tend', 'xend', 'yend', 'zend',
                # 'Sxend', 'Syend', 'Szend', 'BxEnd', 'ByEnd', 'BzEnd']
                if query != "all":
                    df = df.query(query)
            except:
                missedRuns.append(i)
                continue

            total += len(df.index)
            histTemp, binEdges = np.histogram(df['Estart'],range = histRange, bins = nbins)
            histTotal += histTemp
        #ENDFOR

        print('okay!')
        print('Total neutrons simulated: ', total)
        print('Neutrons in hist: ', np.sum(histTotal))
        print('Error reading run numbers-- ', missedRuns)
        neutronCount.append(total)
        Estart.append(histTotal)
    #ENDFOR

    print('\nPlotting...',end='')
    plt.figure()
    plt.plot(param,neutronCount,marker='.')
    plt.xlabel('B [T]')
    plt.ylabel('Neutron count')
    plt.title('PPM ramp')
    plt.grid()
    plt.savefig('PPM_ramp.png')
    plt.close()

    for p, E in zip(param, Estart):
        fig, ax = plt.subplots()
        ax.bar(binEdges[1:], E, width=(histRange[1]-histRange[0])/float(nbins))
        ax.set_xlabel('E [neV]')
        ax.set_xlim([histRange[0] , histRange[1]])
        ax.set_ylabel('Number of neutrons')
        plt.savefig('Estart_B=' + str(np.round(p, decimals=3)) + '.png')
        plt.close()

    print('Done!')



    return

if ( __name__ == '__main__' ):
    main()
